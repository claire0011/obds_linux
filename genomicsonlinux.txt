#Must be in mamba environment, using alias load_mamba 

# Fastqc on read1
# (obds-rnaseq) shug7479@obds:/project/shug7479/linux/2_rnaseq/3_analysis/1_fastqc$ fastqc
	# /project/shug7479/linux/2_rnaseq/1_fastq/cd4_rep1_read1.fastq.gz
	# /project/shug7479/linux/2_rnaseq/3_analysis/1_fastqc


# Multiqc into output (-o) output folder (reports) created in this command
#
# (obds-rnaseq) shug7479@obds:/project/shug7479/linux/2_rnaseq/3_analysis/1_fastqc$ multiqc
	# /project/shug7479/linux/2_rnaseq/1_fastq -o /project/shug7479/linux/2_rnaseq/3_analysis/reports/
#
#Multiqc is smart and knows which files to perform multiqc on, so you can just multiqc an entire folder

#Git push to git repo
#Go into git/obds_linux git repository
	#(obds-rnaseq) shug7479@obds:/project/shug7479/git/obds_linux$
#you can copy any file into this folder e.g downloads.txt or rnaseq_commands.sh into /obds_linux
#Then you can add this file to git e.g:
	#(obds-rnaseq) shug7479@obds:/project/shug7479/git/obds_linux$ git add rnaseq_analysis.sh
#Do commit command to save changes with a message e.g:
	#(obds-rnaseq) shug7479@obds:/project/shug7479/git/obds_linux$ commit -m "changes to rnaseq_commands.sh"
#Push this to git:
	#(obds-rnaseq) shug7479@obds:/project/shug7479/git/obds_linux$ git push
#pushes all changes. you can also do git pull, to take from github to this terminal.


#Slurm
#create a nano .sh: 
	#(obds-rnaseq) shug7479@obds:/project/shug7479/linux/2_rnaseq/3_analysis/2_fastqc$ nano slurm_template.sh
#Use the following template: 

#!/bin/bash
##########################################################################
## A script template for submitting batch jobs. To submit a batch job, 
## please type
##
##    sbatch script_name.sh
##
## Please note that anything after the characters "#SBATCH" on a line
## will be treated as a Slurm option.
##########################################################################

## Specify a partition. Check available partitions using sinfo Slurm command.
#SBATCH --partition=short

## The following line will send an email notification to your registered email
## address when the job ends or fails.
#SBATCH --mail-type=END,FAIL

## Specify the amount of memory that your job needs. This is for the whole job.
## Asking for much more memory than needed will mean that it takes longer to
## start when the cluster is busy.
#SBATCH --mem=10G

## Specify the number of CPU cores that your job can use. This is only relevant for
## jobs which are able to take advantage of additional CPU cores. Asking for more
## cores than your job can use will mean that it takes longer to start when the
## cluster is busy.
#SBATCH --ntasks=8

## Specify the maximum amount of time that your job will need to run. Asking for
## the correct amount of time can help to get your job to start quicker. Time is
## specified as DAYS-HOURS:MINUTES:SECONDS. This example is one hour.
#SBATCH --time=0-01:00:00

## Provide file name (files will be saved in directory where job was ran) or path
## to capture the terminal output and save any error messages. This is very useful
## if you have problems and need to ask for help.
#SBATCH --output=%j_%x.out
#SBATCH --error=%j_%x.err

## ################### CODE TO RUN ##########################
# Load modules (if required - e.g. when not using conda) 
# module load R-base/4.3.0

# Execute these commands 

#Use this template when using slurm,run this command with 'sbatch slurm_template.sh'
#Check position in queue using 'squeue', or 'watch squeue --me'

#RNA analysis using hisat
#Use slurm template above and the following, these are the files that fastqc has already been performed on
#hisat2 --threads 8 \
#        -x /project/shared/linux/5_rnaseq/hisat2_index/grcm39 \
#        -1 /project/shug7479/linux/2_rnaseq/1_fastq/cd4_rep1_read1.fastq.gz  \
#        -2 /project/shug7479/linux/2_rnaseq/1_fastq/cd4_rep1_read2.fastq.gz  \
#        --rna-strandness RF \
#       --summary-file stats.txt \
#        -S aln-pe.sam 
#
#Where this is one line but in nano its nicer if you do a backslash to keep it on one screen
#\ tells the terminal that this is one command and it needs to read to the next line
#threads are related to CPU, if you choose 8 threads you should pick 8 CPU, each command e.g featureCounts
#will have different commands for threads 
#you do hisat to create a SAM file from mouse index number and the two fastqc files from before, you need
#to know certain information e.g rna-strandness, information about this is in --help for specific commands
#SAM is Sequence Alignment Map, contains alignment information and also unmapped reads, this can be
#converted to BAM

# Convert SAM to BAM and sort 
#First line is convert to sam file while also sorting on one line 
#samtools view -b aln-pe.sam | samtools sort -@ 4 -o aln-pe.bam 

#samtools index aln-pe.bam

#samtools flagstats aln-pe.bam > aln-pe.flagstat

#samtools idxstats aln-pe.bam > aln-pe.idxstats

#idxstats reads the BAM index (.bai) file to count how many reads map to each chromosome
#flagstat reads the flag field for all entries in the BAM and summarises the output


#FeatureCounts using .gtf file from ensemble
#featureCounts -t exon -g gene_id -a /project/shug7479/linux/2_rnaseq/2_genome/Mus_musculus.GRCm39.115.gtf.gz \
#        -o counts.txt -T 4 aln-pe.bam \
#        -s 2 \
#        -p 
#
#-T 4 denotes 4 threads, this must match the CPU
#-s 2 was found in featureCounts --help, shows reverse paired strand, 1 was paired strand
#-p told us it was paired
#Multiqc was performed on the entire folder 3_analysis, multiqc knows which files to perform this on 

